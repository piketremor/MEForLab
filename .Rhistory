b3_tap=0.3836274
b4_tap=1.41380994
b5_tap=0.08866994
b6_tap=-0.29753964
b7_tap=0.15192029
}
else if(Bark=='ob' & SPP=='RS'){
a0_tap=0.8758
a1_tap=0.992
a2_tap=0.0633
b1_tap=0.4128
b2_tap=-0.6877
b3_tap=0.4413
b4_tap=1.1818
b5_tap=0.1131
b6_tap=-0.4356
b7_tap=0.1042
#parms w/ FIA data
a0_tap=0.886886241411388
a1_tap=0.995431239145283
a2_tap=0.0541365481351767
b1_tap=0.411160410244944
b2_tap=-0.658022227353248
b3_tap=0.418213595349517
b4_tap=1.09113756405639
b5_tap=0.102379812299201
b6_tap=-0.40367256147942
b7_tap=0.104842994095004
}
#Sweet birch
else if(Bark=='ob' & SPP=='SB'){
a0_tap=0.8471057131
a1_tap=0.9875376729
a2_tap=0.0769690406
b1_tap=0.9322599144
b2_tap=-0.954580316
b3_tap=0.48553875
b4_tap=3.0294545606
b5_tap=0.0767610836
b6_tap=-0.238398236
b7_tap=0
}
else if(Bark=='ob' & SPP=='SM'){
a0_tap=1.0517056747
a1_tap=0.96129896
a2_tap=0.0386037512
b1_tap=0.8556437779
b2_tap=-0.249723079
b3_tap=0.4149367053
b4_tap=1.2548340569
b5_tap=0.0412998707
b6_tap=-0.113500099
b7_tap=0
}
else if(Bark=='ob' & SPP=='TL'  | SPP=='TA'){
a0_tap=0.7387
a1_tap=0.9716
a2_tap=0.1431
b1_tap=0.271
b2_tap=-0.4958
b3_tap=0.6508
b4_tap=-0.3887
b5_tap=0.1324
b6_tap=-0.7035
b7_tap=0
#parms w/ FIA data
a0_tap=0.762977580507808
a1_tap=0.979320525735404
a2_tap=0.122788251183516
b1_tap=0.245935863173793
b2_tap=-0.564901857800367
b3_tap=0.666790795105499
b4_tap=-0.0728778930339496
b5_tap=0.143651487515151
b6_tap=-0.791188036888163
b7_tap=0
}
else if(Bark=='ob' & SPP=='WA'){
a0_tap=0.8550736297
a1_tap=0.9768941226
a2_tap=0.0770356694
b1_tap=0.7819090026
b2_tap=-0.791762733
b3_tap=0.476698925
b4_tap=3.5003928402
b5_tap=0.0859040469
b6_tap=-0.487974342
b7_tap=0
}
else if(Bark=='ib' & SPP=='WC'  | SPP=='NC'){
a0_tap=0.86118766
a1_tap=0.98152118
a2_tap=0.0568203
b1_tap=0.40717678
b2_tap=-0.05482572
b3_tap=0.47809459
b4_tap=-1.32512447
b5_tap=0.1538487
b6_tap=-0.53687808
b7_tap=0
}
else if(Bark=='ob' & SPP=='WC' | SPP=='NC'){
a0_tap=0.902
a1_tap=0.9676
a2_tap=0.085
b1_tap=0.3204
b2_tap=-0.4336
b3_tap=0.5212
b4_tap=0.0157
b5_tap=0.137
b6_tap=-0.4585
b7_tap=0
#parms w/ FIA data
a0_tap=0.876976728762079
a1_tap=0.972187200775237
a2_tap=0.0905032843727524
b1_tap=0.319643790061659
b2_tap=-0.495778605215774
b3_tap=0.546605647382787
b4_tap=-0.0540118375921429
b5_tap=0.131666046721139
b6_tap=-0.454765563250266
b7_tap=0
}
else if(Bark=='ib' & SPP=='WP'){
a0_tap=1.04881379
a1_tap=1.00779696
a2_tap=-0.04595353
b1_tap=0.38085445
b2_tap=-0.85956463
b3_tap=0.34380669
b4_tap=4.60836993
b5_tap=0.111855
b6_tap=-0.5523203
b7_tap=0
}
else if(Bark=='ob' & SPP=='WP'){
a0_tap=1.0202
a1_tap=0.985
a2_tap=0.0149
b1_tap=0.3697
b2_tap=-0.7512
b3_tap=0.3536
b4_tap=3.8496
b5_tap=0.1074
b6_tap=-0.5131
b7_tap=0
#parms w/ FIA data
a0_tap=0.961977278802905
a1_tap=0.985977453808376
a2_tap=0.0333180987707418
b1_tap=0.383416881614619
b2_tap=-0.753661988626837
b3_tap=0.392529765236197
b4_tap=3.4224381734935
b5_tap=0.100601541094101
b6_tap=-0.485617012177084
b7_tap=0
}
else if(Bark=='ib' & SPP=='WS'){
a0_tap=1.0202
a1_tap=0.985
a2_tap=0.0149
b1_tap=0.3697
b2_tap=-0.7512
b3_tap=0.3536
b4_tap=3.8496
b5_tap=0.1074
b6_tap=-0.5131
b7_tap=0
}
else if(Bark=='ib' & SPP=='WS'){
a0_tap=0.75826241
a1_tap=0.98481863
a2_tap=0.09956165
b1_tap=0.36505143
b2_tap=-0.51501314
b3_tap=0.55913869
b4_tap=0.75846281
b5_tap=0.07011851
b6_tap=-0.44928376
b7_tap=0.07830011
}
else if(Bark=='ob' & SPP=='WS'){
a0_tap=0.7317
a1_tap=0.9577
a2_tap=0.1593
b1_tap=0.2638
b2_tap=-0.4246
b3_tap=0.5505
b4_tap=-0.1269
b5_tap=0.1145
b6_tap=-0.6249
b7_tap=0.088
#parms w/ FIA data
a0_tap=0.725059647049259
a1_tap=0.999930744977476
a2_tap=0.11890841412387
b1_tap=0.286031149725587
b2_tap=-0.417052954651359
b3_tap=0.581226449067082
b4_tap=-0.562751307358532
b5_tap=0.101380520664108
b6_tap=-0.563774194060357
b7_tap=0.096121529684134
}
else if(Bark=='ob' & SPP=='YB'){
a0_tap=1.1263776728
a1_tap=0.9485083275
a2_tap=0.0371321602
b1_tap=0.7662525552
b2_tap=-0.028147685
b3_tap=0.2334044323
b4_tap=4.8569609081
b5_tap=0.0753180483
b6_tap=-0.205052535
b7_tap=0
}
else if(Bark=='ob' & SPP=='OH'){
a0_tap=0.947211744
a1_tap=0.971353083
a2_tap=0.063182322
b1_tap=0.633614831
b2_tap=-0.549156049
b3_tap=0.439010965
b4_tap=3.187595496
b5_tap=0.079154063
b6_tap=-0.41277508
b7_tap=0
}
else if(Bark=='ob' & SPP=='OS'){
a0_tap=0.88047918
a1_tap=0.988526494
a2_tap=0.0660791
b1_tap=0.365548416
b2_tap=-0.607245626
b3_tap=0.486832282
b4_tap=1.282373726
b5_tap=0.094120201
b6_tap=-0.447380533
b7_tap=0
}
else if(Bark=='ib' & SPP=='OS'){
a0_tap=0.896475601
a1_tap=1.001886257
a2_tap=0.020707494
b1_tap=0.391516469
b2_tap=-0.395638544
b3_tap=-0.011787171
b4_tap=1.335110611
b5_tap=0.076311559
b6_tap=-0.286988273
b7_tap=0
}
else{
a0_tap=0.896475601
a1_tap=1.001886257
a2_tap=0.020707494
b1_tap=0.391516469
b2_tap=-0.395638544
b3_tap=-0.011787171
b4_tap=1.335110611
b5_tap=0.076311559
b6_tap=-0.286988273
b7_tap=0
}
#  KozakTaper=function(Bark,SPP,DHT,DBH,HT,Planted = FALSE){
HTm = HT*0.3048
DHTm = DHT*0.3048
DBHm = DBH*2.54
p = 1.3/HTm
z = DHTm/HTm
Xi = (1 - z^(1/3))/(1 - p^(1/3))
Qi = 1 - z^(1/3)
y = (a0_tap * (DBH^a1_tap) * (HT^a2_tap)) * Xi^(b1_tap * z^4 + b2_tap * (exp(-DBHm/HTm)) +
b3_tap * Xi^0.1 + b4_tap * (1/DBHm) + b5_tap * HT^Qi + b6_tap * Xi + b7_tap*Planted)
Diam=ifelse(Bark=='ob' & DHTm==1.37,DBHm,y)
imp = Diam*0.3937
return(imp)
}
KozakTaper("ob","SM",40,12,68,Planted=FALSE)
KozakTaper("ib","SM",40,12,68,Planted=FALSE)
devtools::build()
library(MEForLab)
devtools::build()
devtools::document()
library(MEForLab)
devtools::document()
library(MEForLab)
devtools::document()
library(MEForLab)
MCW <- function(SPP,DBH)
{
SPcodes=c('BF','BS','EH','WP','NC','RS','WS','AB','GB','RB','RO','PB','QA',
'RM','SM','YB','OH','OS','99')
coefs = matrix(c(
# a1           a2
1.37       , 0.572      ,    # BF
0.535      , 0.742      ,    # BS
2.44       , 0.408      ,    # EH
1.24       , 0.585      ,    # WP
1.63       , 0.436      ,    # NC
1.80       , 0.461      ,    # RS
1.50       , 0.496      ,    # WS
2.93       , 0.434      ,    # AB
2.24       , 0.382      ,    # GB
2.24       , 0.382      ,    # RB
4.08       , 0.310      ,    # RO
1.48       , 0.623      ,    # PB
1.31       , 0.586      ,    # QA
2.17       , 0.491      ,    # RM
3.31       , 0.356      ,    # SM
4.04       , 0.308      ,    # YB
4.04       , 0.308      ,    # OH
1.597128571, 0.513957143,    # OS
2.24262    , 0.462653333),   # 99
ncol=2,byrow=TRUE)
sprow = match(SPP,SPcodes)
sprow[is.na(sprow)] = length(SPcodes)
X <- coefs[sprow,1]*DBH**coefs[sprow,2]
ft <- X*3.28
return(ft)
}
MCW("BF",14)
MCW("SM",14)
devtools::document()
library(MEForLab)
devtools::document()
devtools::document()
library(MEForLab)
devtools::document()
devtools::build()
library(MEForLab)
devtools::document()
library(MEForLab)
devtools::build_manual()
MCW <- function(SPP,DBH)
{
SPcodes=c('BF','BS','EH','WP','NC','RS','WS','AB','GB','RB','RO','PB','QA',
'RM','SM','YB','OH','OS','99')
coefs = matrix(c(
# a1           a2
1.37       , 0.572      ,    # BF
0.535      , 0.742      ,    # BS
2.44       , 0.408      ,    # EH
1.24       , 0.585      ,    # WP
1.63       , 0.436      ,    # NC
1.80       , 0.461      ,    # RS
1.50       , 0.496      ,    # WS
2.93       , 0.434      ,    # AB
2.24       , 0.382      ,    # GB
2.24       , 0.382      ,    # RB
4.08       , 0.310      ,    # RO
1.48       , 0.623      ,    # PB
1.31       , 0.586      ,    # QA
2.17       , 0.491      ,    # RM
3.31       , 0.356      ,    # SM
4.04       , 0.308      ,    # YB
4.04       , 0.308      ,    # OH
1.597128571, 0.513957143,    # OS
2.24262    , 0.462653333),   # 99
ncol=2,byrow=TRUE)
sprow = match(SPP,SPcodes)
sprow[is.na(sprow)] = length(SPcodes)
X <- coefs[sprow,1]*DBH**coefs[sprow,2]
ft = X*3.28
return(ft)
}
MCW("RS",10)
ft = X*3.28
MCW <- function(SPP,DBH)
{
SPcodes=c('BF','BS','EH','WP','NC','RS','WS','AB','GB','RB','RO','PB','QA',
'RM','SM','YB','OH','OS','99')
coefs = matrix(c(
# a1           a2
1.37       , 0.572      ,    # BF
0.535      , 0.742      ,    # BS
2.44       , 0.408      ,    # EH
1.24       , 0.585      ,    # WP
1.63       , 0.436      ,    # NC
1.80       , 0.461      ,    # RS
1.50       , 0.496      ,    # WS
2.93       , 0.434      ,    # AB
2.24       , 0.382      ,    # GB
2.24       , 0.382      ,    # RB
4.08       , 0.310      ,    # RO
1.48       , 0.623      ,    # PB
1.31       , 0.586      ,    # QA
2.17       , 0.491      ,    # RM
3.31       , 0.356      ,    # SM
4.04       , 0.308      ,    # YB
4.04       , 0.308      ,    # OH
1.597128571, 0.513957143,    # OS
2.24262    , 0.462653333),   # 99
ncol=2,byrow=TRUE)
sprow = match(SPP,SPcodes)
sprow[is.na(sprow)] = length(SPcodes)
X <- coefs[sprow,1]*(DBH*2.54)*coefs[sprow,2]
ft = X*3.28
return(ft)
}
MCW("RS",10)
MCW("RS",20)
MCW("RS",10)
X <- coefs[sprow,1]*(DBH*0.3937)*coefs[sprow,2]
MCW <- function(SPP,DBH)
{
SPcodes=c('BF','BS','EH','WP','NC','RS','WS','AB','GB','RB','RO','PB','QA',
'RM','SM','YB','OH','OS','99')
coefs = matrix(c(
# a1           a2
1.37       , 0.572      ,    # BF
0.535      , 0.742      ,    # BS
2.44       , 0.408      ,    # EH
1.24       , 0.585      ,    # WP
1.63       , 0.436      ,    # NC
1.80       , 0.461      ,    # RS
1.50       , 0.496      ,    # WS
2.93       , 0.434      ,    # AB
2.24       , 0.382      ,    # GB
2.24       , 0.382      ,    # RB
4.08       , 0.310      ,    # RO
1.48       , 0.623      ,    # PB
1.31       , 0.586      ,    # QA
2.17       , 0.491      ,    # RM
3.31       , 0.356      ,    # SM
4.04       , 0.308      ,    # YB
4.04       , 0.308      ,    # OH
1.597128571, 0.513957143,    # OS
2.24262    , 0.462653333),   # 99
ncol=2,byrow=TRUE)
sprow = match(SPP,SPcodes)
sprow[is.na(sprow)] = length(SPcodes)
X <- coefs[sprow,1]*(DBH*0.3937)*coefs[sprow,2]
ft = X*3.28
return(ft)
}
MCW("RS",10)
MCW("RS",20)
devtools::build_manual()
library(MEForLab)
devtools::document()
library(MEForLab)
heygi.index <- function(DBH, #dbh of the subject tree
dbhi, # dbh of the competitor tree
distance) # distance bewteen stems in feet
{
i = DBH/(dbhi*distance)
return(i)
}
heygi.index(11,13,23)
heygi.index(11,13,3)
heygi.index(11,13,0)
heygi.index(11,13,1)
heygi.index(10,13,3)
heygi.index(10,25,3)
i = (dbhi/DBH)/distance)
heygi.index <- function(DBH, #dbh of the subject tree
dbhi, # dbh of the competitor tree
distance) # distance bewteen stems in feet
{
i = (dbhi/DBH)/distance)
heygi.index <- function(DBH, #dbh of the subject tree
dbhi, # dbh of the competitor tree
distance) # distance bewteen stems in feet
{
i = (dbhi/DBH)/distance
return(i)
}
heygi.index(10,25,3)
heygi.index(10,13,3)
devtools::document()
devtools::document()
library(MEForLab)
devtools::document()
library(MEForLab)
devtools::document()
library(MEForLab)
devtools::document()
library(MEForLab)
devtools::document()
library(MEForLab)
em = ((overlap/focal_area)*heightj*crownwidthj/(height*crownwidthi))
ek.monserud.index <- function(
overlap, # area of overlap between two crowns
heightj, # height of competitor tree
crownwidthj, # crown width of the competitor tree
crownwidthi, # crown width of the subject tree
heighti, # height of the subject tree
focal_area){ # OG crown area of the subject tree
em = ((overlap/focal_area)*heightj*crownwidthj/(height*crownwidthi))
return(em)
}
ek.monserud.index(23,45,20,20,45,260)
em = ((overlap/focal_area)*heightj*crownwidthj/(heighti*crownwidthi))
ek.monserud.index <- function(
overlap, # area of overlap between two crowns
heightj, # height of competitor tree
crownwidthj, # crown width of the competitor tree
crownwidthi, # crown width of the subject tree
heighti, # height of the subject tree
focal_area){ # OG crown area of the subject tree
em = ((overlap/focal_area)*heightj*crownwidthj/(heighti*crownwidthi))
return(em)
}
ek.monserud.index(23,45,20,20,45,260)
ek.monserud.index(230,45,20,20,45,260)
ek.monserud.index(23,45,20,20,45,130)
ek.monserud.index(60,45,20,20,45,130)
devtools::document()
library(MEForLab)
